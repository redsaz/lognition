/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package com.redsaz.lognition.convert.model.jmeter;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CsvJtlRow extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7088314422044788345L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"CsvJtlRow\",\"namespace\":\"com.redsaz.lognition.convert.model.jmeter\",\"fields\":[{\"name\":\"timeStamp\",\"type\":[\"null\",\"long\"]},{\"name\":\"elapsed\",\"type\":[\"null\",\"long\"]},{\"name\":\"label\",\"type\":[\"null\",\"string\"]},{\"name\":\"responseCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"responseMessage\",\"type\":[\"null\",\"string\"]},{\"name\":\"threadName\",\"type\":[\"null\",\"string\"]},{\"name\":\"dataType\",\"type\":[\"null\",\"string\"]},{\"name\":\"success\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"failureMessage\",\"type\":[\"null\",\"string\"]},{\"name\":\"bytes\",\"type\":[\"null\",\"long\"]},{\"name\":\"sentBytes\",\"type\":[\"null\",\"long\"]},{\"name\":\"grpThreads\",\"type\":[\"null\",\"int\"]},{\"name\":\"allThreads\",\"type\":[\"null\",\"int\"]},{\"name\":\"URL\",\"type\":[\"null\",\"string\"]},{\"name\":\"Filename\",\"type\":[\"null\",\"string\"]},{\"name\":\"Latency\",\"type\":[\"null\",\"int\"]},{\"name\":\"connect\",\"type\":[\"null\",\"int\"]},{\"name\":\"encoding\",\"type\":[\"null\",\"string\"]},{\"name\":\"SampleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"ErrorCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"Hostname\",\"type\":[\"null\",\"string\"]},{\"name\":\"IdleTime\",\"type\":[\"null\",\"int\"]},{\"name\":\"Variables\",\"type\":[\"null\",\"string\"]}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  @Deprecated public java.lang.Long timeStamp;
  @Deprecated public java.lang.Long elapsed;
  @Deprecated public java.lang.CharSequence label;
  @Deprecated public java.lang.CharSequence responseCode;
  @Deprecated public java.lang.CharSequence responseMessage;
  @Deprecated public java.lang.CharSequence threadName;
  @Deprecated public java.lang.CharSequence dataType;
  @Deprecated public java.lang.Boolean success;
  @Deprecated public java.lang.CharSequence failureMessage;
  @Deprecated public java.lang.Long bytes;
  @Deprecated public java.lang.Long sentBytes;
  @Deprecated public java.lang.Integer grpThreads;
  @Deprecated public java.lang.Integer allThreads;
  @Deprecated public java.lang.CharSequence URL;
  @Deprecated public java.lang.CharSequence Filename;
  @Deprecated public java.lang.Integer Latency;
  @Deprecated public java.lang.Integer connect;
  @Deprecated public java.lang.CharSequence encoding;
  @Deprecated public java.lang.Integer SampleCount;
  @Deprecated public java.lang.Integer ErrorCount;
  @Deprecated public java.lang.CharSequence Hostname;
  @Deprecated public java.lang.Integer IdleTime;
  @Deprecated public java.lang.CharSequence Variables;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public CsvJtlRow() {}

  /**
   * All-args constructor.
   *
   * @param timeStamp The new value for timeStamp
   * @param elapsed The new value for elapsed
   * @param label The new value for label
   * @param responseCode The new value for responseCode
   * @param responseMessage The new value for responseMessage
   * @param threadName The new value for threadName
   * @param dataType The new value for dataType
   * @param success The new value for success
   * @param failureMessage The new value for failureMessage
   * @param bytes The new value for bytes
   * @param sentBytes The new value for sentBytes
   * @param grpThreads The new value for grpThreads
   * @param allThreads The new value for allThreads
   * @param URL The new value for URL
   * @param Filename The new value for Filename
   * @param Latency The new value for Latency
   * @param connect The new value for connect
   * @param encoding The new value for encoding
   * @param SampleCount The new value for SampleCount
   * @param ErrorCount The new value for ErrorCount
   * @param Hostname The new value for Hostname
   * @param IdleTime The new value for IdleTime
   * @param Variables The new value for Variables
   */
  public CsvJtlRow(
      java.lang.Long timeStamp,
      java.lang.Long elapsed,
      java.lang.CharSequence label,
      java.lang.CharSequence responseCode,
      java.lang.CharSequence responseMessage,
      java.lang.CharSequence threadName,
      java.lang.CharSequence dataType,
      java.lang.Boolean success,
      java.lang.CharSequence failureMessage,
      java.lang.Long bytes,
      java.lang.Long sentBytes,
      java.lang.Integer grpThreads,
      java.lang.Integer allThreads,
      java.lang.CharSequence URL,
      java.lang.CharSequence Filename,
      java.lang.Integer Latency,
      java.lang.Integer connect,
      java.lang.CharSequence encoding,
      java.lang.Integer SampleCount,
      java.lang.Integer ErrorCount,
      java.lang.CharSequence Hostname,
      java.lang.Integer IdleTime,
      java.lang.CharSequence Variables) {
    this.timeStamp = timeStamp;
    this.elapsed = elapsed;
    this.label = label;
    this.responseCode = responseCode;
    this.responseMessage = responseMessage;
    this.threadName = threadName;
    this.dataType = dataType;
    this.success = success;
    this.failureMessage = failureMessage;
    this.bytes = bytes;
    this.sentBytes = sentBytes;
    this.grpThreads = grpThreads;
    this.allThreads = allThreads;
    this.URL = URL;
    this.Filename = Filename;
    this.Latency = Latency;
    this.connect = connect;
    this.encoding = encoding;
    this.SampleCount = SampleCount;
    this.ErrorCount = ErrorCount;
    this.Hostname = Hostname;
    this.IdleTime = IdleTime;
    this.Variables = Variables;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return timeStamp;
      case 1:
        return elapsed;
      case 2:
        return label;
      case 3:
        return responseCode;
      case 4:
        return responseMessage;
      case 5:
        return threadName;
      case 6:
        return dataType;
      case 7:
        return success;
      case 8:
        return failureMessage;
      case 9:
        return bytes;
      case 10:
        return sentBytes;
      case 11:
        return grpThreads;
      case 12:
        return allThreads;
      case 13:
        return URL;
      case 14:
        return Filename;
      case 15:
        return Latency;
      case 16:
        return connect;
      case 17:
        return encoding;
      case 18:
        return SampleCount;
      case 19:
        return ErrorCount;
      case 20:
        return Hostname;
      case 21:
        return IdleTime;
      case 22:
        return Variables;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        timeStamp = (java.lang.Long) value$;
        break;
      case 1:
        elapsed = (java.lang.Long) value$;
        break;
      case 2:
        label = (java.lang.CharSequence) value$;
        break;
      case 3:
        responseCode = (java.lang.CharSequence) value$;
        break;
      case 4:
        responseMessage = (java.lang.CharSequence) value$;
        break;
      case 5:
        threadName = (java.lang.CharSequence) value$;
        break;
      case 6:
        dataType = (java.lang.CharSequence) value$;
        break;
      case 7:
        success = (java.lang.Boolean) value$;
        break;
      case 8:
        failureMessage = (java.lang.CharSequence) value$;
        break;
      case 9:
        bytes = (java.lang.Long) value$;
        break;
      case 10:
        sentBytes = (java.lang.Long) value$;
        break;
      case 11:
        grpThreads = (java.lang.Integer) value$;
        break;
      case 12:
        allThreads = (java.lang.Integer) value$;
        break;
      case 13:
        URL = (java.lang.CharSequence) value$;
        break;
      case 14:
        Filename = (java.lang.CharSequence) value$;
        break;
      case 15:
        Latency = (java.lang.Integer) value$;
        break;
      case 16:
        connect = (java.lang.Integer) value$;
        break;
      case 17:
        encoding = (java.lang.CharSequence) value$;
        break;
      case 18:
        SampleCount = (java.lang.Integer) value$;
        break;
      case 19:
        ErrorCount = (java.lang.Integer) value$;
        break;
      case 20:
        Hostname = (java.lang.CharSequence) value$;
        break;
      case 21:
        IdleTime = (java.lang.Integer) value$;
        break;
      case 22:
        Variables = (java.lang.CharSequence) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timeStamp' field.
   *
   * @return The value of the 'timeStamp' field.
   */
  public java.lang.Long getTimeStamp() {
    return timeStamp;
  }

  /**
   * Sets the value of the 'timeStamp' field.
   *
   * @param value the value to set.
   */
  public void setTimeStamp(java.lang.Long value) {
    this.timeStamp = value;
  }

  /**
   * Gets the value of the 'elapsed' field.
   *
   * @return The value of the 'elapsed' field.
   */
  public java.lang.Long getElapsed() {
    return elapsed;
  }

  /**
   * Sets the value of the 'elapsed' field.
   *
   * @param value the value to set.
   */
  public void setElapsed(java.lang.Long value) {
    this.elapsed = value;
  }

  /**
   * Gets the value of the 'label' field.
   *
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   *
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'responseCode' field.
   *
   * @return The value of the 'responseCode' field.
   */
  public java.lang.CharSequence getResponseCode() {
    return responseCode;
  }

  /**
   * Sets the value of the 'responseCode' field.
   *
   * @param value the value to set.
   */
  public void setResponseCode(java.lang.CharSequence value) {
    this.responseCode = value;
  }

  /**
   * Gets the value of the 'responseMessage' field.
   *
   * @return The value of the 'responseMessage' field.
   */
  public java.lang.CharSequence getResponseMessage() {
    return responseMessage;
  }

  /**
   * Sets the value of the 'responseMessage' field.
   *
   * @param value the value to set.
   */
  public void setResponseMessage(java.lang.CharSequence value) {
    this.responseMessage = value;
  }

  /**
   * Gets the value of the 'threadName' field.
   *
   * @return The value of the 'threadName' field.
   */
  public java.lang.CharSequence getThreadName() {
    return threadName;
  }

  /**
   * Sets the value of the 'threadName' field.
   *
   * @param value the value to set.
   */
  public void setThreadName(java.lang.CharSequence value) {
    this.threadName = value;
  }

  /**
   * Gets the value of the 'dataType' field.
   *
   * @return The value of the 'dataType' field.
   */
  public java.lang.CharSequence getDataType() {
    return dataType;
  }

  /**
   * Sets the value of the 'dataType' field.
   *
   * @param value the value to set.
   */
  public void setDataType(java.lang.CharSequence value) {
    this.dataType = value;
  }

  /**
   * Gets the value of the 'success' field.
   *
   * @return The value of the 'success' field.
   */
  public java.lang.Boolean getSuccess() {
    return success;
  }

  /**
   * Sets the value of the 'success' field.
   *
   * @param value the value to set.
   */
  public void setSuccess(java.lang.Boolean value) {
    this.success = value;
  }

  /**
   * Gets the value of the 'failureMessage' field.
   *
   * @return The value of the 'failureMessage' field.
   */
  public java.lang.CharSequence getFailureMessage() {
    return failureMessage;
  }

  /**
   * Sets the value of the 'failureMessage' field.
   *
   * @param value the value to set.
   */
  public void setFailureMessage(java.lang.CharSequence value) {
    this.failureMessage = value;
  }

  /**
   * Gets the value of the 'bytes' field.
   *
   * @return The value of the 'bytes' field.
   */
  public java.lang.Long getBytes() {
    return bytes;
  }

  /**
   * Sets the value of the 'bytes' field.
   *
   * @param value the value to set.
   */
  public void setBytes(java.lang.Long value) {
    this.bytes = value;
  }

  /**
   * Gets the value of the 'sentBytes' field.
   *
   * @return The value of the 'sentBytes' field.
   */
  public java.lang.Long getSentBytes() {
    return sentBytes;
  }

  /**
   * Sets the value of the 'sentBytes' field.
   *
   * @param value the value to set.
   */
  public void setSentBytes(java.lang.Long value) {
    this.sentBytes = value;
  }

  /**
   * Gets the value of the 'grpThreads' field.
   *
   * @return The value of the 'grpThreads' field.
   */
  public java.lang.Integer getGrpThreads() {
    return grpThreads;
  }

  /**
   * Sets the value of the 'grpThreads' field.
   *
   * @param value the value to set.
   */
  public void setGrpThreads(java.lang.Integer value) {
    this.grpThreads = value;
  }

  /**
   * Gets the value of the 'allThreads' field.
   *
   * @return The value of the 'allThreads' field.
   */
  public java.lang.Integer getAllThreads() {
    return allThreads;
  }

  /**
   * Sets the value of the 'allThreads' field.
   *
   * @param value the value to set.
   */
  public void setAllThreads(java.lang.Integer value) {
    this.allThreads = value;
  }

  /**
   * Gets the value of the 'URL' field.
   *
   * @return The value of the 'URL' field.
   */
  public java.lang.CharSequence getURL() {
    return URL;
  }

  /**
   * Sets the value of the 'URL' field.
   *
   * @param value the value to set.
   */
  public void setURL(java.lang.CharSequence value) {
    this.URL = value;
  }

  /**
   * Gets the value of the 'Filename' field.
   *
   * @return The value of the 'Filename' field.
   */
  public java.lang.CharSequence getFilename() {
    return Filename;
  }

  /**
   * Sets the value of the 'Filename' field.
   *
   * @param value the value to set.
   */
  public void setFilename(java.lang.CharSequence value) {
    this.Filename = value;
  }

  /**
   * Gets the value of the 'Latency' field.
   *
   * @return The value of the 'Latency' field.
   */
  public java.lang.Integer getLatency() {
    return Latency;
  }

  /**
   * Sets the value of the 'Latency' field.
   *
   * @param value the value to set.
   */
  public void setLatency(java.lang.Integer value) {
    this.Latency = value;
  }

  /**
   * Gets the value of the 'connect' field.
   *
   * @return The value of the 'connect' field.
   */
  public java.lang.Integer getConnect() {
    return connect;
  }

  /**
   * Sets the value of the 'connect' field.
   *
   * @param value the value to set.
   */
  public void setConnect(java.lang.Integer value) {
    this.connect = value;
  }

  /**
   * Gets the value of the 'encoding' field.
   *
   * @return The value of the 'encoding' field.
   */
  public java.lang.CharSequence getEncoding() {
    return encoding;
  }

  /**
   * Sets the value of the 'encoding' field.
   *
   * @param value the value to set.
   */
  public void setEncoding(java.lang.CharSequence value) {
    this.encoding = value;
  }

  /**
   * Gets the value of the 'SampleCount' field.
   *
   * @return The value of the 'SampleCount' field.
   */
  public java.lang.Integer getSampleCount() {
    return SampleCount;
  }

  /**
   * Sets the value of the 'SampleCount' field.
   *
   * @param value the value to set.
   */
  public void setSampleCount(java.lang.Integer value) {
    this.SampleCount = value;
  }

  /**
   * Gets the value of the 'ErrorCount' field.
   *
   * @return The value of the 'ErrorCount' field.
   */
  public java.lang.Integer getErrorCount() {
    return ErrorCount;
  }

  /**
   * Sets the value of the 'ErrorCount' field.
   *
   * @param value the value to set.
   */
  public void setErrorCount(java.lang.Integer value) {
    this.ErrorCount = value;
  }

  /**
   * Gets the value of the 'Hostname' field.
   *
   * @return The value of the 'Hostname' field.
   */
  public java.lang.CharSequence getHostname() {
    return Hostname;
  }

  /**
   * Sets the value of the 'Hostname' field.
   *
   * @param value the value to set.
   */
  public void setHostname(java.lang.CharSequence value) {
    this.Hostname = value;
  }

  /**
   * Gets the value of the 'IdleTime' field.
   *
   * @return The value of the 'IdleTime' field.
   */
  public java.lang.Integer getIdleTime() {
    return IdleTime;
  }

  /**
   * Sets the value of the 'IdleTime' field.
   *
   * @param value the value to set.
   */
  public void setIdleTime(java.lang.Integer value) {
    this.IdleTime = value;
  }

  /**
   * Gets the value of the 'Variables' field.
   *
   * @return The value of the 'Variables' field.
   */
  public java.lang.CharSequence getVariables() {
    return Variables;
  }

  /**
   * Sets the value of the 'Variables' field.
   *
   * @param value the value to set.
   */
  public void setVariables(java.lang.CharSequence value) {
    this.Variables = value;
  }

  /**
   * Creates a new CsvJtlRow RecordBuilder.
   *
   * @return A new CsvJtlRow RecordBuilder
   */
  public static com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder newBuilder() {
    return new com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder();
  }

  /**
   * Creates a new CsvJtlRow RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new CsvJtlRow RecordBuilder
   */
  public static com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder newBuilder(
      com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder other) {
    return new com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder(other);
  }

  /**
   * Creates a new CsvJtlRow RecordBuilder by copying an existing CsvJtlRow instance.
   *
   * @param other The existing instance to copy.
   * @return A new CsvJtlRow RecordBuilder
   */
  public static com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder newBuilder(
      com.redsaz.lognition.convert.model.jmeter.CsvJtlRow other) {
    return new com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder(other);
  }

  /** RecordBuilder for CsvJtlRow instances. */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CsvJtlRow>
      implements org.apache.avro.data.RecordBuilder<CsvJtlRow> {

    private java.lang.Long timeStamp;
    private java.lang.Long elapsed;
    private java.lang.CharSequence label;
    private java.lang.CharSequence responseCode;
    private java.lang.CharSequence responseMessage;
    private java.lang.CharSequence threadName;
    private java.lang.CharSequence dataType;
    private java.lang.Boolean success;
    private java.lang.CharSequence failureMessage;
    private java.lang.Long bytes;
    private java.lang.Long sentBytes;
    private java.lang.Integer grpThreads;
    private java.lang.Integer allThreads;
    private java.lang.CharSequence URL;
    private java.lang.CharSequence Filename;
    private java.lang.Integer Latency;
    private java.lang.Integer connect;
    private java.lang.CharSequence encoding;
    private java.lang.Integer SampleCount;
    private java.lang.Integer ErrorCount;
    private java.lang.CharSequence Hostname;
    private java.lang.Integer IdleTime;
    private java.lang.CharSequence Variables;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[0].schema(), other.timeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.elapsed)) {
        this.elapsed = data().deepCopy(fields()[1].schema(), other.elapsed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.label)) {
        this.label = data().deepCopy(fields()[2].schema(), other.label);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.responseCode)) {
        this.responseCode = data().deepCopy(fields()[3].schema(), other.responseCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.responseMessage)) {
        this.responseMessage = data().deepCopy(fields()[4].schema(), other.responseMessage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.threadName)) {
        this.threadName = data().deepCopy(fields()[5].schema(), other.threadName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.dataType)) {
        this.dataType = data().deepCopy(fields()[6].schema(), other.dataType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.success)) {
        this.success = data().deepCopy(fields()[7].schema(), other.success);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.failureMessage)) {
        this.failureMessage = data().deepCopy(fields()[8].schema(), other.failureMessage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bytes)) {
        this.bytes = data().deepCopy(fields()[9].schema(), other.bytes);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sentBytes)) {
        this.sentBytes = data().deepCopy(fields()[10].schema(), other.sentBytes);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.grpThreads)) {
        this.grpThreads = data().deepCopy(fields()[11].schema(), other.grpThreads);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.allThreads)) {
        this.allThreads = data().deepCopy(fields()[12].schema(), other.allThreads);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.URL)) {
        this.URL = data().deepCopy(fields()[13].schema(), other.URL);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.Filename)) {
        this.Filename = data().deepCopy(fields()[14].schema(), other.Filename);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.Latency)) {
        this.Latency = data().deepCopy(fields()[15].schema(), other.Latency);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.connect)) {
        this.connect = data().deepCopy(fields()[16].schema(), other.connect);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.encoding)) {
        this.encoding = data().deepCopy(fields()[17].schema(), other.encoding);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.SampleCount)) {
        this.SampleCount = data().deepCopy(fields()[18].schema(), other.SampleCount);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.ErrorCount)) {
        this.ErrorCount = data().deepCopy(fields()[19].schema(), other.ErrorCount);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.Hostname)) {
        this.Hostname = data().deepCopy(fields()[20].schema(), other.Hostname);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.IdleTime)) {
        this.IdleTime = data().deepCopy(fields()[21].schema(), other.IdleTime);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.Variables)) {
        this.Variables = data().deepCopy(fields()[22].schema(), other.Variables);
        fieldSetFlags()[22] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CsvJtlRow instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(com.redsaz.lognition.convert.model.jmeter.CsvJtlRow other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[0].schema(), other.timeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.elapsed)) {
        this.elapsed = data().deepCopy(fields()[1].schema(), other.elapsed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.label)) {
        this.label = data().deepCopy(fields()[2].schema(), other.label);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.responseCode)) {
        this.responseCode = data().deepCopy(fields()[3].schema(), other.responseCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.responseMessage)) {
        this.responseMessage = data().deepCopy(fields()[4].schema(), other.responseMessage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.threadName)) {
        this.threadName = data().deepCopy(fields()[5].schema(), other.threadName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.dataType)) {
        this.dataType = data().deepCopy(fields()[6].schema(), other.dataType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.success)) {
        this.success = data().deepCopy(fields()[7].schema(), other.success);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.failureMessage)) {
        this.failureMessage = data().deepCopy(fields()[8].schema(), other.failureMessage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bytes)) {
        this.bytes = data().deepCopy(fields()[9].schema(), other.bytes);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sentBytes)) {
        this.sentBytes = data().deepCopy(fields()[10].schema(), other.sentBytes);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.grpThreads)) {
        this.grpThreads = data().deepCopy(fields()[11].schema(), other.grpThreads);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.allThreads)) {
        this.allThreads = data().deepCopy(fields()[12].schema(), other.allThreads);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.URL)) {
        this.URL = data().deepCopy(fields()[13].schema(), other.URL);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.Filename)) {
        this.Filename = data().deepCopy(fields()[14].schema(), other.Filename);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.Latency)) {
        this.Latency = data().deepCopy(fields()[15].schema(), other.Latency);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.connect)) {
        this.connect = data().deepCopy(fields()[16].schema(), other.connect);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.encoding)) {
        this.encoding = data().deepCopy(fields()[17].schema(), other.encoding);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.SampleCount)) {
        this.SampleCount = data().deepCopy(fields()[18].schema(), other.SampleCount);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.ErrorCount)) {
        this.ErrorCount = data().deepCopy(fields()[19].schema(), other.ErrorCount);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.Hostname)) {
        this.Hostname = data().deepCopy(fields()[20].schema(), other.Hostname);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.IdleTime)) {
        this.IdleTime = data().deepCopy(fields()[21].schema(), other.IdleTime);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.Variables)) {
        this.Variables = data().deepCopy(fields()[22].schema(), other.Variables);
        fieldSetFlags()[22] = true;
      }
    }

    /**
     * Gets the value of the 'timeStamp' field.
     *
     * @return The value.
     */
    public java.lang.Long getTimeStamp() {
      return timeStamp;
    }

    /**
     * Sets the value of the 'timeStamp' field.
     *
     * @param value The value of 'timeStamp'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setTimeStamp(
        java.lang.Long value) {
      validate(fields()[0], value);
      this.timeStamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'timeStamp' field has been set.
     *
     * @return True if the 'timeStamp' field has been set, false otherwise.
     */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'timeStamp' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearTimeStamp() {
      timeStamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'elapsed' field.
     *
     * @return The value.
     */
    public java.lang.Long getElapsed() {
      return elapsed;
    }

    /**
     * Sets the value of the 'elapsed' field.
     *
     * @param value The value of 'elapsed'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setElapsed(
        java.lang.Long value) {
      validate(fields()[1], value);
      this.elapsed = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'elapsed' field has been set.
     *
     * @return True if the 'elapsed' field has been set, false otherwise.
     */
    public boolean hasElapsed() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'elapsed' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearElapsed() {
      elapsed = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'label' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
     * Sets the value of the 'label' field.
     *
     * @param value The value of 'label'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setLabel(
        java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.label = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'label' field has been set.
     *
     * @return True if the 'label' field has been set, false otherwise.
     */
    public boolean hasLabel() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'label' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearLabel() {
      label = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'responseCode' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getResponseCode() {
      return responseCode;
    }

    /**
     * Sets the value of the 'responseCode' field.
     *
     * @param value The value of 'responseCode'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setResponseCode(
        java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.responseCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'responseCode' field has been set.
     *
     * @return True if the 'responseCode' field has been set, false otherwise.
     */
    public boolean hasResponseCode() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'responseCode' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearResponseCode() {
      responseCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'responseMessage' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getResponseMessage() {
      return responseMessage;
    }

    /**
     * Sets the value of the 'responseMessage' field.
     *
     * @param value The value of 'responseMessage'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setResponseMessage(
        java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.responseMessage = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'responseMessage' field has been set.
     *
     * @return True if the 'responseMessage' field has been set, false otherwise.
     */
    public boolean hasResponseMessage() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'responseMessage' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearResponseMessage() {
      responseMessage = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'threadName' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getThreadName() {
      return threadName;
    }

    /**
     * Sets the value of the 'threadName' field.
     *
     * @param value The value of 'threadName'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setThreadName(
        java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.threadName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'threadName' field has been set.
     *
     * @return True if the 'threadName' field has been set, false otherwise.
     */
    public boolean hasThreadName() {
      return fieldSetFlags()[5];
    }

    /**
     * Clears the value of the 'threadName' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearThreadName() {
      threadName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'dataType' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getDataType() {
      return dataType;
    }

    /**
     * Sets the value of the 'dataType' field.
     *
     * @param value The value of 'dataType'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setDataType(
        java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.dataType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'dataType' field has been set.
     *
     * @return True if the 'dataType' field has been set, false otherwise.
     */
    public boolean hasDataType() {
      return fieldSetFlags()[6];
    }

    /**
     * Clears the value of the 'dataType' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearDataType() {
      dataType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'success' field.
     *
     * @return The value.
     */
    public java.lang.Boolean getSuccess() {
      return success;
    }

    /**
     * Sets the value of the 'success' field.
     *
     * @param value The value of 'success'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setSuccess(
        java.lang.Boolean value) {
      validate(fields()[7], value);
      this.success = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'success' field has been set.
     *
     * @return True if the 'success' field has been set, false otherwise.
     */
    public boolean hasSuccess() {
      return fieldSetFlags()[7];
    }

    /**
     * Clears the value of the 'success' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearSuccess() {
      success = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
     * Gets the value of the 'failureMessage' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getFailureMessage() {
      return failureMessage;
    }

    /**
     * Sets the value of the 'failureMessage' field.
     *
     * @param value The value of 'failureMessage'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setFailureMessage(
        java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.failureMessage = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
     * Checks whether the 'failureMessage' field has been set.
     *
     * @return True if the 'failureMessage' field has been set, false otherwise.
     */
    public boolean hasFailureMessage() {
      return fieldSetFlags()[8];
    }

    /**
     * Clears the value of the 'failureMessage' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearFailureMessage() {
      failureMessage = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
     * Gets the value of the 'bytes' field.
     *
     * @return The value.
     */
    public java.lang.Long getBytes() {
      return bytes;
    }

    /**
     * Sets the value of the 'bytes' field.
     *
     * @param value The value of 'bytes'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setBytes(
        java.lang.Long value) {
      validate(fields()[9], value);
      this.bytes = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
     * Checks whether the 'bytes' field has been set.
     *
     * @return True if the 'bytes' field has been set, false otherwise.
     */
    public boolean hasBytes() {
      return fieldSetFlags()[9];
    }

    /**
     * Clears the value of the 'bytes' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearBytes() {
      bytes = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
     * Gets the value of the 'sentBytes' field.
     *
     * @return The value.
     */
    public java.lang.Long getSentBytes() {
      return sentBytes;
    }

    /**
     * Sets the value of the 'sentBytes' field.
     *
     * @param value The value of 'sentBytes'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setSentBytes(
        java.lang.Long value) {
      validate(fields()[10], value);
      this.sentBytes = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
     * Checks whether the 'sentBytes' field has been set.
     *
     * @return True if the 'sentBytes' field has been set, false otherwise.
     */
    public boolean hasSentBytes() {
      return fieldSetFlags()[10];
    }

    /**
     * Clears the value of the 'sentBytes' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearSentBytes() {
      sentBytes = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
     * Gets the value of the 'grpThreads' field.
     *
     * @return The value.
     */
    public java.lang.Integer getGrpThreads() {
      return grpThreads;
    }

    /**
     * Sets the value of the 'grpThreads' field.
     *
     * @param value The value of 'grpThreads'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setGrpThreads(
        java.lang.Integer value) {
      validate(fields()[11], value);
      this.grpThreads = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
     * Checks whether the 'grpThreads' field has been set.
     *
     * @return True if the 'grpThreads' field has been set, false otherwise.
     */
    public boolean hasGrpThreads() {
      return fieldSetFlags()[11];
    }

    /**
     * Clears the value of the 'grpThreads' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearGrpThreads() {
      grpThreads = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
     * Gets the value of the 'allThreads' field.
     *
     * @return The value.
     */
    public java.lang.Integer getAllThreads() {
      return allThreads;
    }

    /**
     * Sets the value of the 'allThreads' field.
     *
     * @param value The value of 'allThreads'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setAllThreads(
        java.lang.Integer value) {
      validate(fields()[12], value);
      this.allThreads = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
     * Checks whether the 'allThreads' field has been set.
     *
     * @return True if the 'allThreads' field has been set, false otherwise.
     */
    public boolean hasAllThreads() {
      return fieldSetFlags()[12];
    }

    /**
     * Clears the value of the 'allThreads' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearAllThreads() {
      allThreads = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
     * Gets the value of the 'URL' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getURL() {
      return URL;
    }

    /**
     * Sets the value of the 'URL' field.
     *
     * @param value The value of 'URL'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setURL(
        java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.URL = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
     * Checks whether the 'URL' field has been set.
     *
     * @return True if the 'URL' field has been set, false otherwise.
     */
    public boolean hasURL() {
      return fieldSetFlags()[13];
    }

    /**
     * Clears the value of the 'URL' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearURL() {
      URL = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
     * Gets the value of the 'Filename' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getFilename() {
      return Filename;
    }

    /**
     * Sets the value of the 'Filename' field.
     *
     * @param value The value of 'Filename'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setFilename(
        java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.Filename = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
     * Checks whether the 'Filename' field has been set.
     *
     * @return True if the 'Filename' field has been set, false otherwise.
     */
    public boolean hasFilename() {
      return fieldSetFlags()[14];
    }

    /**
     * Clears the value of the 'Filename' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearFilename() {
      Filename = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
     * Gets the value of the 'Latency' field.
     *
     * @return The value.
     */
    public java.lang.Integer getLatency() {
      return Latency;
    }

    /**
     * Sets the value of the 'Latency' field.
     *
     * @param value The value of 'Latency'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setLatency(
        java.lang.Integer value) {
      validate(fields()[15], value);
      this.Latency = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
     * Checks whether the 'Latency' field has been set.
     *
     * @return True if the 'Latency' field has been set, false otherwise.
     */
    public boolean hasLatency() {
      return fieldSetFlags()[15];
    }

    /**
     * Clears the value of the 'Latency' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearLatency() {
      Latency = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
     * Gets the value of the 'connect' field.
     *
     * @return The value.
     */
    public java.lang.Integer getConnect() {
      return connect;
    }

    /**
     * Sets the value of the 'connect' field.
     *
     * @param value The value of 'connect'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setConnect(
        java.lang.Integer value) {
      validate(fields()[16], value);
      this.connect = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
     * Checks whether the 'connect' field has been set.
     *
     * @return True if the 'connect' field has been set, false otherwise.
     */
    public boolean hasConnect() {
      return fieldSetFlags()[16];
    }

    /**
     * Clears the value of the 'connect' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearConnect() {
      connect = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
     * Gets the value of the 'encoding' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getEncoding() {
      return encoding;
    }

    /**
     * Sets the value of the 'encoding' field.
     *
     * @param value The value of 'encoding'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setEncoding(
        java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.encoding = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
     * Checks whether the 'encoding' field has been set.
     *
     * @return True if the 'encoding' field has been set, false otherwise.
     */
    public boolean hasEncoding() {
      return fieldSetFlags()[17];
    }

    /**
     * Clears the value of the 'encoding' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearEncoding() {
      encoding = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
     * Gets the value of the 'SampleCount' field.
     *
     * @return The value.
     */
    public java.lang.Integer getSampleCount() {
      return SampleCount;
    }

    /**
     * Sets the value of the 'SampleCount' field.
     *
     * @param value The value of 'SampleCount'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setSampleCount(
        java.lang.Integer value) {
      validate(fields()[18], value);
      this.SampleCount = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
     * Checks whether the 'SampleCount' field has been set.
     *
     * @return True if the 'SampleCount' field has been set, false otherwise.
     */
    public boolean hasSampleCount() {
      return fieldSetFlags()[18];
    }

    /**
     * Clears the value of the 'SampleCount' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearSampleCount() {
      SampleCount = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
     * Gets the value of the 'ErrorCount' field.
     *
     * @return The value.
     */
    public java.lang.Integer getErrorCount() {
      return ErrorCount;
    }

    /**
     * Sets the value of the 'ErrorCount' field.
     *
     * @param value The value of 'ErrorCount'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setErrorCount(
        java.lang.Integer value) {
      validate(fields()[19], value);
      this.ErrorCount = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
     * Checks whether the 'ErrorCount' field has been set.
     *
     * @return True if the 'ErrorCount' field has been set, false otherwise.
     */
    public boolean hasErrorCount() {
      return fieldSetFlags()[19];
    }

    /**
     * Clears the value of the 'ErrorCount' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearErrorCount() {
      ErrorCount = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
     * Gets the value of the 'Hostname' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getHostname() {
      return Hostname;
    }

    /**
     * Sets the value of the 'Hostname' field.
     *
     * @param value The value of 'Hostname'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setHostname(
        java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.Hostname = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
     * Checks whether the 'Hostname' field has been set.
     *
     * @return True if the 'Hostname' field has been set, false otherwise.
     */
    public boolean hasHostname() {
      return fieldSetFlags()[20];
    }

    /**
     * Clears the value of the 'Hostname' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearHostname() {
      Hostname = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
     * Gets the value of the 'IdleTime' field.
     *
     * @return The value.
     */
    public java.lang.Integer getIdleTime() {
      return IdleTime;
    }

    /**
     * Sets the value of the 'IdleTime' field.
     *
     * @param value The value of 'IdleTime'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setIdleTime(
        java.lang.Integer value) {
      validate(fields()[21], value);
      this.IdleTime = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
     * Checks whether the 'IdleTime' field has been set.
     *
     * @return True if the 'IdleTime' field has been set, false otherwise.
     */
    public boolean hasIdleTime() {
      return fieldSetFlags()[21];
    }

    /**
     * Clears the value of the 'IdleTime' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearIdleTime() {
      IdleTime = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
     * Gets the value of the 'Variables' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getVariables() {
      return Variables;
    }

    /**
     * Sets the value of the 'Variables' field.
     *
     * @param value The value of 'Variables'.
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder setVariables(
        java.lang.CharSequence value) {
      validate(fields()[22], value);
      this.Variables = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
     * Checks whether the 'Variables' field has been set.
     *
     * @return True if the 'Variables' field has been set, false otherwise.
     */
    public boolean hasVariables() {
      return fieldSetFlags()[22];
    }

    /**
     * Clears the value of the 'Variables' field.
     *
     * @return This builder.
     */
    public com.redsaz.lognition.convert.model.jmeter.CsvJtlRow.Builder clearVariables() {
      Variables = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    @Override
    public CsvJtlRow build() {
      try {
        CsvJtlRow record = new CsvJtlRow();
        record.timeStamp =
            fieldSetFlags()[0] ? this.timeStamp : (java.lang.Long) defaultValue(fields()[0]);
        record.elapsed =
            fieldSetFlags()[1] ? this.elapsed : (java.lang.Long) defaultValue(fields()[1]);
        record.label =
            fieldSetFlags()[2] ? this.label : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.responseCode =
            fieldSetFlags()[3]
                ? this.responseCode
                : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.responseMessage =
            fieldSetFlags()[4]
                ? this.responseMessage
                : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.threadName =
            fieldSetFlags()[5]
                ? this.threadName
                : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.dataType =
            fieldSetFlags()[6] ? this.dataType : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.success =
            fieldSetFlags()[7] ? this.success : (java.lang.Boolean) defaultValue(fields()[7]);
        record.failureMessage =
            fieldSetFlags()[8]
                ? this.failureMessage
                : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.bytes = fieldSetFlags()[9] ? this.bytes : (java.lang.Long) defaultValue(fields()[9]);
        record.sentBytes =
            fieldSetFlags()[10] ? this.sentBytes : (java.lang.Long) defaultValue(fields()[10]);
        record.grpThreads =
            fieldSetFlags()[11] ? this.grpThreads : (java.lang.Integer) defaultValue(fields()[11]);
        record.allThreads =
            fieldSetFlags()[12] ? this.allThreads : (java.lang.Integer) defaultValue(fields()[12]);
        record.URL =
            fieldSetFlags()[13] ? this.URL : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.Filename =
            fieldSetFlags()[14]
                ? this.Filename
                : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.Latency =
            fieldSetFlags()[15] ? this.Latency : (java.lang.Integer) defaultValue(fields()[15]);
        record.connect =
            fieldSetFlags()[16] ? this.connect : (java.lang.Integer) defaultValue(fields()[16]);
        record.encoding =
            fieldSetFlags()[17]
                ? this.encoding
                : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.SampleCount =
            fieldSetFlags()[18] ? this.SampleCount : (java.lang.Integer) defaultValue(fields()[18]);
        record.ErrorCount =
            fieldSetFlags()[19] ? this.ErrorCount : (java.lang.Integer) defaultValue(fields()[19]);
        record.Hostname =
            fieldSetFlags()[20]
                ? this.Hostname
                : (java.lang.CharSequence) defaultValue(fields()[20]);
        record.IdleTime =
            fieldSetFlags()[21] ? this.IdleTime : (java.lang.Integer) defaultValue(fields()[21]);
        record.Variables =
            fieldSetFlags()[22]
                ? this.Variables
                : (java.lang.CharSequence) defaultValue(fields()[22]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter WRITER$ =
      new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader READER$ =
      new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
