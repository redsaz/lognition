openapi: 3.1.0
info:
  title: Lognition HTTP API
  description: |-
    Lognition lets you upload CSV data and view it. The Lognition HTTP API provides a way for 
    automation and other clients to do this without going through the Web UI.

    _This is still a work-in-progress and has not reached 1.0 yet. APIs are subject to change._
    
    Some useful links:
    - [The Lognition repository](https://github.com/redsaz/lognition/)
    - [The source API definition for Lognition](https://github.com/redsaz/lognition/blob/master/src/main/resources/openapi.yml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: redsaz@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.8.0
externalDocs:
  description: Find out more about Lognition
  url: https://github.com/redsaz/lognition/
tags:
  - name: logs
    description: Recorded data
  - name: reviews
    description: Log analysis
paths:
  /logs:
    post:
      tags:
        - logs
      summary: Add a new log
      description: Imports a new log
      operationId: importLog
      parameters:
        - name: name
          in: query
          description: Name (a.k.a. title) of the log
          required: false
          schema:
            type: string
        - name: notes
          in: query
          description: A description or any information about the log, in commonmark.
          required: false
          schema:
            type: string
        - name: labels
          in: query
          description: The tags and/or labels belonging to the log.
          required: false
          schema:
            type: string
      requestBody:
        description: The data to upload
        content:
          text/csv:
              schema:
                  type: string
              examples:
                  jtl:
                      summary: JMeter test log
                      value: |
                        timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,bytes,grpThreads,allThreads,Latency
                        1678771076000,125,GET example/{id},200,OK,example 1-1,text,true,128,2,2,125
                        1678771076250,130,GET example/{id},200,OK,example 1-1,text,true,140,2,2,130
                        1678771076500,200,GET example/{id},200,OK,example 1-1,text,true,152,2,2,200
                        1678771076750,160,GET example/{id},200,OK,example 1-1,text,true,164,2,2,160
          text/plain:
              schema:
                  type: string
              examples:
                  jtl:
                      summary: JMeter test log
                      value: |
                        timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,bytes,grpThreads,allThreads,Latency
                        1678771076000,125,GET example/{id},200,OK,example 1-1,text,true,128,2,2,125
                        1678771076250,130,GET example/{id},200,OK,example 1-1,text,true,140,2,2,130
                        1678771076500,200,GET example/{id},200,OK,example 1-1,text,true,152,2,2,200
                        1678771076750,160,GET example/{id},200,OK,example 1-1,text,true,164,2,2,160
          application/octet-stream: {}
          #application/zip:
          #application/json:
          #application/xml:
          #text/xml:
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/x-lognition-v1-logbrief+json:
              schema:
                $ref: '#/components/schemas/LogBrief'          
        '400':
          description: Invalid input
    get:
      tags:
        - logs
      summary: List log briefs
      description: Returns the URIs and titles of logs matching a filter, or all logs if no filter is given.
      operationId: listLogBriefs
      parameters:
        - name: labelSelector
          in: query
          description: label selector for logs
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/x-lognition-v1-logbrief+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogBrief'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogBrief'
  /logs/{logId}:
    get:
      tags:
        - logs
      summary: Find log brief by ID
      description: Returns the outline/description of a log
      operationId: getLogBrief
      parameters:
        - name: logId
          in: path
          description: Identifier of log brief to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/x-lognition-v1-logbrief+json:
              schema:
                $ref: '#/components/schemas/LogBrief'          
            application/json:
              schema:
                $ref: '#/components/schemas/LogBrief'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/LogBrief'
        '400':
          description: Invalid ID supplied
        '404':
          description: Log not found
    delete:
      tags:
        - logs
      summary: Delete a logs details and data.
      description: Returns the outline/description of a log
      operationId: deleteLog
      parameters:
        - name: logId
          in: path
          description: Identifier of log to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/x-lognition-v1-logbrief+json:
              schema:
                $ref: '#/components/schemas/LogBrief'          
            application/json:
              schema:
                $ref: '#/components/schemas/LogBrief'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/LogBrief'
        '400':
          description: Invalid ID supplied
        '404':
          description: Log not found
  /logs/{logId}/content:
    get:
      tags:
        - logs
      summary: Get log data by ID
      description: Returns the data/content of the log
      operationId: getCsvContent
      parameters:
        - name: logId
          in: path
          description: ID of log to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            text/csv:
  /reviews:
    post:
      tags:
        - reviews
      summary: Create review
      description: Create a new review
      operationId: createReview
      requestBody:
        description: The data to upload
        content: 
          application/x-lognition-v1-review+json:
            schema:
              $ref: '#/components/schemas/Review'             
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
          application/x-lognition-v1-review+json:
            schema:
              $ref: '#/components/schemas/Review'          
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input      
    get:
      tags:
        - reviews
      summary: List all reviews
      description: Returns a list of all the reviews.
      operationId: listReviews
      responses:
        '200':
          description: successful operation
          content:
            application/x-lognition-v1-review+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /reviews/{reviewId}:
    get:
      tags:
        - reviews
      summary: Get review
      description: Retrieve a review by identifier
      operationId: getReview
      parameters:
        - name: reviewId
          in: path
          description: Identifier of review to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/x-lognition-v1-review+json:
              schema:
                $ref: '#/components/schemas/Review'
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found
    delete:
      tags:
        - reviews
      summary: Delete a review
      description: Delete a review by identifier
      operationId: deleteReview
      responses:
        '204':
          description: successful operation
  /reviews/{reviewId}/logs:
    get:
      tags:
        - reviews
      summary: List logs in review
      description: A review can compare multiple logs. This returns the logs used in the review.
      operationId: listLogs
      parameters:
        - name: reviewId
          in: path
          description: Identifier of review
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/x-lognition-v1-logbrief+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogBrief'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogBrief'
components:
  schemas:
    LogBrief:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        uriName:
          type: string
          example: example-log
        title:
          type: string
          example: Example Log
        notes:
          type: string
          example: Example description of log notes, with _commonmark_
        filename:
          type: string
          example: test-run.csv
        uploadedTimestampMillis:
          type: integer
          format: int64
          example: 1678771076495
        contentId:
          type: integer
          format: int64
          example: 10
      xml:
        name: LogBrief
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        uriName:
          type: string
          example: example-review
        name:
          type: string
          example: Example Review
        description:
          type: string
          example: Example description
        createdMillis:
          type: integer
          format: int64
          example: 1678771076495
        body:
          type: string
          example: Example review body, with _commonmark_